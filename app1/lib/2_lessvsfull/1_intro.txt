ðŸ§± StatelessWidget vs StatefulWidget â€” Quelle diffÃ©rence ?
Type	Description	Utilisation
StatelessWidget	UI immuable, aucun changement aprÃ¨s affichage	Titres, icÃ´nes, images, mise en page
StatefulWidget	UI modifiable â€” lâ€™Ã©tat peut changer avec setState()	Formulaires, compteurs, sliders, boutons, champs de texte

ðŸ“Œ Exemple 1 â€” StatelessWidget (UI simple, immuable)
dart
Copier
Modifier
import 'package:flutter/material.dart';

void main() => runApp(const MyStatelessApp());

class MyStatelessApp extends StatelessWidget {
  const MyStatelessApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Stateless Demo',
      home: Scaffold(
        appBar: AppBar(title: const Text('StatelessWidget')),
        body: const Center(
          child: Text(
            'Ce texte ne changera jamais',
            style: TextStyle(fontSize: 24, color: Colors.blue),
          ),
        ),
      ),
    );
  }
}
ðŸ”¹ Ici, le widget ne change jamais, peu importe les interactions.

ðŸ“Œ Exemple 2 â€” StatefulWidget avec setState() (Compteur dynamique)
dart
Copier
Modifier
import 'package:flutter/material.dart';

void main() => runApp(const MyStatefulApp());

class MyStatefulApp extends StatelessWidget {
  const MyStatefulApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Stateful Demo',
      home: Scaffold(
        appBar: AppBar(title: const Text('StatefulWidget')),
        body: const CounterWidget(),
      ),
    );
  }
}

class CounterWidget extends StatefulWidget {
  const CounterWidget({super.key});

  @override
  State<CounterWidget> createState() => _CounterWidgetState();
}

class _CounterWidgetState extends State<CounterWidget> {
  int count = 0;

  void _increment() {
    setState(() {
      count++;
    });
  }

  @override
  Widget build(BuildContext context) {
    return Center(
      child: Column(
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          Text(
            'Compteur : $count',
            style: Theme.of(context).textTheme.headline4,
          ),
          const SizedBox(height: 20),
          ElevatedButton.icon(
            onPressed: _increment,
            icon: const Icon(Icons.add),
            label: const Text('IncrÃ©menter'),
          ),
        ],
      ),
    );
  }
}
ðŸ”¸ Explication :

StatefulWidget crÃ©e un Ã©tat (State) sÃ©parÃ©.

La fonction setState() redessine lâ€™interface quand count change.

ðŸ§  RÃ©sumÃ© des concepts Ã  retenir
Terme	Signification
StatelessWidget	Pas dâ€™Ã©tat Ã  gÃ©rer. Contenu figÃ©.
StatefulWidget	Contenu dynamique avec Ã©tat.
setState()	Permet de notifier Flutter que lâ€™UI doit Ãªtre reconstruite.
State<T>	Classe qui contient les donnÃ©es variables du widget.