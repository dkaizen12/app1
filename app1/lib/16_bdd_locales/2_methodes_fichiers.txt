Voici une **explication détaillée** de chacune des méthodes/fonctions que tu as mentionnées, avec toutes leurs **propriétés utiles**, **paramètres**, et des **exemples d’utilisation clairs** dans un projet Flutter.

---

## 📁 `getApplicationDocumentsDirectory()`

> Méthode provenant du package `path_provider`. Elle permet d’obtenir un chemin vers le répertoire privé de l'application (persistant et sûr).

### 📌 Signature :

```dart
Future<Directory> getApplicationDocumentsDirectory()
```

### ✅ Utilisation :

```dart
import 'package:path_provider/path_provider.dart';

Future<void> example() async {
  Directory directory = await getApplicationDocumentsDirectory();
  print('Chemin des documents : ${directory.path}');
}
```

### 📎 Retour :

* Un objet `Directory` de `dart:io`
* Ex : `/data/user/0/com.example.myapp/app_flutter/`

### 📒 Autres variantes similaires :

* `getTemporaryDirectory()` → Dossier temporaire (cache, supprimable)
* `getExternalStorageDirectory()` → Dossier externe (Android uniquement)

---

## 📄 `File(path)`

> Classe de `dart:io`. Sert à créer une instance d’un fichier local (ne crée pas le fichier physiquement tant que tu ne fais pas une opération dessus).

### 📌 Constructeur :

```dart
File myFile = File('/chemin/vers/fichier.txt');
```

### 🔧 Propriétés utiles :

| Propriété      | Description                                      |
| -------------- | ------------------------------------------------ |
| `path`         | Le chemin complet du fichier                     |
| `uri`          | L’URI du fichier                                 |
| `absolute`     | Donne un chemin absolu                           |
| `existsSync()` | Vérifie si le fichier existe (synchrone)         |
| `exists()`     | Vérifie si le fichier existe (asynchrone)        |
| `delete()`     | Supprime le fichier                              |
| `rename()`     | Renomme ou déplace le fichier                    |
| `stat()`       | Retourne les métadonnées (taille, modifié, etc.) |

### ✅ Exemple :

```dart
File file = File('/data/file.txt');
bool exists = await file.exists();
print('Existe : $exists');
```

---

## 📖 `file.readAsString()`

> Permet de lire **tout le contenu texte** d’un fichier (sous forme de `String`).

### 📌 Signature :

```dart
Future<String> readAsString({Encoding encoding = utf8})
```

### ✅ Exemple :

```dart
File file = File('/data/counter.txt');
String contenu = await file.readAsString();
print('Contenu : $contenu');
```

### ⚠️ Attention :

* Si le fichier n’existe pas ou contient du binaire, une **erreur** sera lancée.
* Encodage par défaut : UTF-8

---

## 📝 `file.writeAsString()`

> Écrit une `String` dans le fichier. Écrase par défaut, mais peut ajouter à la fin (`mode: FileMode.append`).

### 📌 Signature :

```dart
Future<File> writeAsString(
  String contents, {
  FileMode mode = FileMode.write,
  Encoding encoding = utf8,
  bool flush = false,
})
```

### 📎 Paramètres utiles :

| Paramètre  | Description                                             |
| ---------- | ------------------------------------------------------- |
| `contents` | Le texte à écrire                                       |
| `mode`     | `FileMode.write` (par défaut), `append`, `writeOnly`... |
| `flush`    | Si `true`, force l’écriture immédiate sur le disque     |
| `encoding` | Encodage du texte (par défaut UTF-8)                    |

### ✅ Exemple simple :

```dart
File file = File('/data/counter.txt');
await file.writeAsString('42');
```

### ✅ Exemple avec ajout :

```dart
await file.writeAsString('Ajout de texte\n', mode: FileMode.append);
```

---

## 🔁 Exemple combiné dans Flutter :

```dart
Future<void> saveDataLocally() async {
  final directory = await getApplicationDocumentsDirectory();
  final file = File('${directory.path}/user_info.txt');

  await file.writeAsString('Nom: Kinois\nVille: Kinshasa');
  final contenu = await file.readAsString();

  print('Contenu du fichier : $contenu');
}
```


## 🧪 Bonus : Lire un fichier JSON

```dart
final file = File('${directory.path}/data.json');
final contenu = await file.readAsString();
final data = jsonDecode(contenu); // ← nécessite import 'dart:convert';
```