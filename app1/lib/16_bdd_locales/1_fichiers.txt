### ✅ `home.dart` avec commentaires

```dart
// 📦 Importations nécessaires
import 'dart:async'; // Pour utiliser Future, async/await
import 'dart:io'; // Pour manipuler les fichiers (File, Directory)
import 'package:flutter/material.dart'; // Pour créer l'interface utilisateur Flutter
import 'package:path_provider/path_provider.dart'; // Pour accéder au dossier local de l'app

/// 🗃️ Classe qui gère la lecture et l’écriture du compteur localement
class CounterStorage {
  /// 🔍 Récupère le chemin du répertoire local pour stocker les fichiers
  Future<String> get _localPath async {
    final directory = await getApplicationDocumentsDirectory(); // dossier documents pour Android/iOS
    return directory.path; // retourne le chemin en tant que chaîne
  }

  /// 📄 Récupère un objet `File` pointant vers le fichier counter.txt dans le répertoire local
  Future<File> get _localFile async {
    final path = await _localPath; // attend que le chemin soit obtenu
    return File('$path/counter.txt'); // crée un fichier dans ce chemin
  }

  /// 📥 Lit le fichier et retourne le contenu comme un entier
  Future<int> readCounter() async {
    try {
      final file = await _localFile; // accède au fichier
      final contents = await file.readAsString(); // lit le contenu comme string
      return int.parse(contents); // convertit en entier
    } catch (e) {
      // Si erreur (ex. : fichier non trouvé), retourne 0 par défaut
      return 0;
    }
  }

  /// 📤 Écrit la valeur du compteur dans le fichier (remplace l’ancien contenu)
  Future<File> writeCounter(int counter) async {
    final file = await _localFile; // accède au fichier
    return file.writeAsString('$counter'); // écrit la valeur comme chaîne de caractères
  }
}
```

---

```dart
/// 🧱 Widget principal avec état : il utilise le service de lecture/écriture
class FlutterDemo extends StatefulWidget {
  const FlutterDemo({super.key, required this.storage});

  final CounterStorage storage; // Instance pour gérer les fichiers

  @override
  State<FlutterDemo> createState() => _FlutterDemoState(); // crée l’état lié
}
```

---

```dart
/// 🔁 L’état associé au widget FlutterDemo
class _FlutterDemoState extends State<FlutterDemo> {
  int _counter = 0; // compteur local en mémoire

  @override
  void initState() {
    super.initState();
    // 🔄 Lecture initiale du compteur depuis le fichier
    widget.storage.readCounter().then((value) {
      setState(() {
        _counter = value; // met à jour l’état avec la valeur lue
      });
    });
  }

  /// 📈 Incrémente le compteur et l’écrit dans le fichier
  Future<File> _incrementCounter() {
    setState(() {
      _counter++; // met à jour l’état local
    });

    return widget.storage.writeCounter(_counter); // sauvegarde la nouvelle valeur
  }

  /// 🎨 Construction de l’interface
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: const Text('Reading and Writing Files')), // barre en haut
      body: Center(
        // contenu centré dans l’écran
        child: Text(
          'Button tapped $_counter time${_counter == 1 ? '' : 's'}.', // message dynamique
          style: const TextStyle(fontSize: 20),
        ),
      ),
      floatingActionButton: FloatingActionButton(
        onPressed: _incrementCounter, // appel de la fonction au clic
        tooltip: 'Increment', // infobulle
        child: const Icon(Icons.add), // icône du bouton
      ),
    );
  }
}
```

---

### ✅ Résumé rapide :

| Élément                              | Rôle                                     |
| ------------------------------------ | ---------------------------------------- |
| `getApplicationDocumentsDirectory()` | Trouver un dossier local sûr             |
| `File(path)`                         | Pointer vers un fichier                  |
| `readAsString()`                     | Lire son contenu texte                   |
| `writeAsString()`                    | Écrire du texte dedans                   |
| `setState()`                         | Actualiser dynamiquement l’interface     |
| `Future<File>`                       | Permet d’attendre l’opération asynchrone |

Souhaites-tu maintenant une version stylisée comme `Stories +243` ou un export en package réutilisable ?



## 📚 Résumé des **fonctions utilisées** :

| Fonction / classe                     | Rôle                                                                    |
| ------------------------------------- | ----------------------------------------------------------------------- |
| `getApplicationDocumentsDirectory()`  | Fournit un dossier spécifique à l'application pour stocker les fichiers |
| `File(path)`                          | Crée une instance de fichier avec un chemin donné                       |
| `file.readAsString()`                 | Lit le contenu d’un fichier texte                                       |
| `file.writeAsString()`                | Écrit une chaîne dans le fichier                                        |
| `int.parse()`                         | Convertit une chaîne en entier                                          |
| `setState()`                          | Déclenche une reconstruction de l’UI avec la nouvelle valeur            |
| `initState()`                         | Méthode appelée à la création initiale du widget                        |
| `FloatingActionButton`                | Bouton flottant pour les actions principales                            |
| `MaterialApp` / `Scaffold` / `AppBar` | Structure de l'application Flutter avec Material Design                 |