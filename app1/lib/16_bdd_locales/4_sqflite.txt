Voici une explication détaillée et structurée de la gestion d'une base de données SQLite avec le package `sqflite` en Flutter. On y explore chaque étape avec commentaires, précisions sur les fonctions, bonnes pratiques, et les propriétés associées.

---

## 📦 1. Import des packages nécessaires

```dart
import 'dart:async'; // Pour les fonctions asynchrones (Future, async/await)
import 'package:flutter/widgets.dart'; // Nécessaire pour initialiser Flutter
import 'package:path/path.dart'; // Pour manipuler les chemins de fichiers
import 'package:sqflite/sqflite.dart'; // Le package SQLite pour Flutter
```

---

## 🐶 2. Définir le modèle de données

```dart
class Dog {
  final int id;
  final String name;
  final int age;

  const Dog({required this.id, required this.name, required this.age});
}
```

🔹 Le modèle `Dog` représente une ligne dans la table `dogs`.

---

## 📁 3. Ouvrir la base de données

```dart
WidgetsFlutterBinding.ensureInitialized(); // Obligatoire avant tout accès à l'API Flutter native

final database = openDatabase(
  join(await getDatabasesPath(), 'doggie_database.db'),
);
```

📌 Explication :

* `getDatabasesPath()` : donne le chemin adapté pour stocker les bases de données.
* `join(...)` : concatène correctement les segments de chemin selon la plateforme (Windows, Android, iOS...).
* `openDatabase(...)` : ouvre (ou crée) une base SQLite.

---

## 📃 4. Créer une table `dogs`

```dart
final database = openDatabase(
  join(await getDatabasesPath(), 'doggie_database.db'),
  onCreate: (db, version) {
    return db.execute(
      'CREATE TABLE dogs(id INTEGER PRIMARY KEY, name TEXT, age INTEGER)',
    );
  },
  version: 1,
);
```

📌 Explication :

* `onCreate` : appelée si la base est créée pour la première fois.
* `db.execute(...)` : exécute une commande SQL.
* `version` : utile pour les migrations futures.

---

## ➕ 5. Insérer un objet `Dog`

### a) Ajouter une méthode `toMap` :

```dart
Map<String, Object?> toMap() {
  return {'id': id, 'name': name, 'age': age};
}
```

### b) Fonction d’insertion :

```dart
Future<void> insertDog(Dog dog) async {
  final db = await database;
  await db.insert(
    'dogs',
    dog.toMap(),
    conflictAlgorithm: ConflictAlgorithm.replace, // remplace l'entrée si elle existe déjà
  );
}
```

📌 `ConflictAlgorithm.replace` permet de ne pas planter l’application en cas de doublon sur l’id.

---

## 📥 6. Lire la liste des `Dog`

```dart
Future<List<Dog>> dogs() async {
  final db = await database;
  final List<Map<String, Object?>> dogMaps = await db.query('dogs');

  return [
    for (final {'id': id as int, 'name': name as String, 'age': age as int} in dogMaps)
      Dog(id: id, name: name, age: age),
  ];
}
```

📌 Explication :

* `db.query('dogs')` : récupère toutes les lignes.
* `List<Map<String, Object?>>` : chaque ligne est un `Map` clé-valeur.
* On transforme la liste en `List<Dog>` à l’aide de la compréhension de liste.

---

## ✏️ 7. Mettre à jour un chien

```dart
Future<void> updateDog(Dog dog) async {
  final db = await database;
  await db.update(
    'dogs',
    dog.toMap(),
    where: 'id = ?',
    whereArgs: [dog.id], // protection contre les injections SQL
  );
}
```

📌 Propriété utile : `whereArgs` sécurise la requête SQL.

---

## ❌ 8. Supprimer un chien

```dart
Future<void> deleteDog(int id) async {
  final db = await database;
  await db.delete(
    'dogs',
    where: 'id = ?',
    whereArgs: [id],
  );
}
```

📌 Évite absolument d’utiliser `where: "id = $id"` (dangereux, vulnérable à l'injection SQL).

---

## 📌 Autres propriétés utiles de `sqflite`

| Méthode                 | Description                                                    |
| ----------------------- | -------------------------------------------------------------- |
| `insert(table, map)`    | Insère une ligne dans `table`                                  |
| `update(...)`           | Met à jour les colonnes spécifiées                             |
| `delete(...)`           | Supprime selon condition `where`                               |
| `query(...)`            | Récupère des lignes                                            |
| `execute(sql)`          | Exécute une requête SQL manuelle                               |
| `transaction((txn) {})` | Permet de grouper plusieurs requêtes de manière atomique       |
| `getDatabasesPath()`    | Donne le chemin standard pour stocker une base SQLite          |
| `close()`               | Ferme la connexion (bonne pratique quand on ne l’utilise plus) |

---

## 🔐 Sécurité & bonnes pratiques

* ✅ Toujours utiliser `whereArgs`
* ✅ Toujours définir une `PRIMARY KEY` dans la table
* ✅ Prévoir `onUpgrade()` et `onDowngrade()` si tu prévois plusieurs versions

---

Si tu veux, je peux :

✅ Générer un fichier complet `.dart` à utiliser avec `main.dart`
✅ Ajouter des opérations CRUD dynamiques avec UI Flutter (liste, ajout, suppression, formulaire)

Souhaites-tu cela ?
